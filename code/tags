!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	makefile	/^CC=g++$/;"	m
CFLAGS	makefile	/^CFLAGS=-c -Wall -pedantic -I\/usr\/include\/gsl$/;"	m
GenerateAngularOrderingSequence	PatternSet.cpp	/^void PatternSet::GenerateAngularOrderingSequence(std::vector<double> & target) {$/;"	f	class:PatternSet
GenerateEuclideanOrderingSequence	PatternSet.cpp	/^void PatternSet::GenerateEuclideanOrderingSequence(std::vector<double> & target) {$/;"	f	class:PatternSet
GenerateOriginalOrderingSequence	PatternSet.cpp	/^void PatternSet::GenerateOriginalOrderingSequence() {$/;"	f	class:PatternSet
GenerateRandomOrderingSequence	PatternSet.cpp	/^void PatternSet::GenerateRandomOrderingSequence() {$/;"	f	class:PatternSet
LDFLAGS	makefile	/^LDFLAGS=-L\/usr\/local\/lib -lgsl -lgslcblas -lm$/;"	m
PATTERNSET_H	PatternSet.h	2;"	d
PATTERNS_UTILITIES_INCLUDED	PatternSetRef.h	10;"	d
PatternSet	PatternSet.cpp	/^PatternSet::PatternSet(int numPatterns, int dimInput, int dimOutput) {$/;"	f	class:PatternSet
PatternSet	PatternSet.h	/^class PatternSet {$/;"	c
PatternSet	PatternSetRef.h	/^class PatternSet {$/;"	c
PatternSetRef	PatternSetRef.cc	/^PatternSetRef::PatternSetRef(const PatternSetRef& pset) {$/;"	f	class:PatternSetRef
PatternSetRef	PatternSetRef.cc	/^PatternSetRef::PatternSetRef(int num_pat, int num_inputs, int num_targets) {$/;"	f	class:PatternSetRef
ProjectOntoPCA	PatternSet.cpp	/^PatternSet * PatternSet::ProjectOntoPCA() {$/;"	f	class:PatternSet
ReadPatterns	PatternSet.cpp	/^void PatternSet::ReadPatterns(FILE * input) {$/;"	f	class:PatternSet
SortPatternSetAngular	PatternSet.cpp	/^        SortPatternSetAngular(std::vector<int> & indexess, std::vector<double> & targett, gsl_matrix * dataa, int dimInputt) {$/;"	f	class:SortPatternSetAngular
SortPatternSetAngular	PatternSet.cpp	/^class SortPatternSetAngular {$/;"	c	file:
SortPatternSetEuclidean	PatternSet.cpp	/^        SortPatternSetEuclidean(std::vector<int> & indexess, std::vector<double> & targett, gsl_matrix * dataa, int dimInputt) {$/;"	f	class:SortPatternSetEuclidean
SortPatternSetEuclidean	PatternSet.cpp	/^class SortPatternSetEuclidean {$/;"	c	file:
WritePatterns	PatternSet.cpp	/^void PatternSet::WritePatterns(FILE * output) {$/;"	f	class:PatternSet
clear_permute_flag	PatternSetRef.h	/^  inline void clear_permute_flag() { permute = false; }$/;"	f	class:PatternSet
covariance_matrix	PatternSetRef.cc	/^gsl_matrix* covariance_matrix(gsl_matrix* cov_m, gsl_matrix* data_m, $/;"	f
data	PatternSet.cpp	/^        gsl_matrix * data;$/;"	m	class:SortPatternSetAngular	file:
data	PatternSet.cpp	/^        gsl_matrix * data;$/;"	m	class:SortPatternSetEuclidean	file:
dimInput	PatternSet.cpp	/^        int dimInput;$/;"	m	class:SortPatternSetAngular	file:
dimInput	PatternSet.cpp	/^        int dimInput;$/;"	m	class:SortPatternSetEuclidean	file:
dimInput	PatternSet.h	/^        int dimInput;$/;"	m	class:PatternSet
dimOutput	PatternSet.h	/^        int dimOutput; \/\/always 0 for this assignment$/;"	m	class:PatternSet
dout	PatternSet.h	5;"	d
dout	PatternSet.h	7;"	d
full_pattern	PatternSetRef.cc	/^gsl_vector* PatternSetRef::full_pattern(int i, gsl_vector* v) const {$/;"	f	class:PatternSetRef
get_permute_flag	PatternSetRef.h	/^  inline bool get_permute_flag() const { return permute; }$/;"	f	class:PatternSet
get_permuted_i	PatternSetRef.cc	/^int PatternSetRef::get_permuted_i(int t) const {$/;"	f	class:PatternSetRef
indexes	PatternSet.cpp	/^        std::vector<int> indexes;$/;"	m	class:SortPatternSetAngular	file:
indexes	PatternSet.cpp	/^        std::vector<int> indexes;$/;"	m	class:SortPatternSetEuclidean	file:
inputVectors	PatternSet.h	/^        gsl_matrix * inputVectors;\/\/ = gsl_matrix_alloc(numPatterns, dimInput);$/;"	m	class:PatternSet
input_pattern	PatternSetRef.cc	/^gsl_vector* PatternSetRef::input_pattern(int i, gsl_vector* v) const {$/;"	f	class:PatternSetRef
inputs_m	PatternSetRef.h	/^  gsl_matrix* inputs_m;     \/\/ the matrix of input vectors, one per row$/;"	m	class:PatternSet
main	pa1.cpp	/^int main(int argc, char* argv[]) {$/;"	f
n_inputs	PatternSetRef.h	/^  int n_inputs;             \/\/ number of input values in each pattern$/;"	m	class:PatternSet
n_patterns	PatternSetRef.h	/^  int n_patterns;           \/\/ number of patterns$/;"	m	class:PatternSet
n_targets	PatternSetRef.h	/^  int n_targets;            \/\/ number of target values in each pattern$/;"	m	class:PatternSet
numPatterns	PatternSet.h	/^        int numPatterns;$/;"	m	class:PatternSet
number_of_inputs	PatternSetRef.h	/^  inline int number_of_inputs() const { return n_inputs; }$/;"	f	class:PatternSet
number_of_patterns	PatternSetRef.h	/^  inline int number_of_patterns() const { return n_patterns; }$/;"	f	class:PatternSet
number_of_targets	PatternSetRef.h	/^  inline int number_of_targets() const { return n_targets; }$/;"	f	class:PatternSet
operator ()	PatternSet.cpp	/^        bool operator()(int index1, int index2) {$/;"	f	class:SortPatternSetAngular
operator ()	PatternSet.cpp	/^        bool operator()(int index1, int index2) {$/;"	f	class:SortPatternSetEuclidean
operator <<	PatternSetRef.cc	/^ostream& operator<<(ostream& ostr, const PatternSetRef& pset) {$/;"	f
operator =	PatternSetRef.cc	/^PatternSetRef& PatternSetRef::operator=(const PatternSetRef& pset) {$/;"	f	class:PatternSetRef
operator >>	PatternSetRef.cc	/^istream& operator>>(istream& istr, PatternSetRef& pset) {$/;"	f
orderSequence	PatternSet.h	/^        std::vector<int> orderSequence;$/;"	m	class:PatternSet
outputVectors	PatternSet.h	/^        gsl_matrix * outputVectors;\/\/ = gsl_matrix_alloc(numPatterns, dimOutput);$/;"	m	class:PatternSet
pattern_size	PatternSetRef.h	/^  inline int pattern_size() const { return (n_inputs + n_targets); }$/;"	f	class:PatternSet
pca_project	PatternSetRef.cc	/^PatternSetRef& PatternSetRef::pca_project() {$/;"	f	class:PatternSetRef
permutation	PatternSetRef.h	/^  int* permutation;         \/\/ the pattern indices, randomly permuted$/;"	m	class:PatternSet
permute	PatternSetRef.h	/^  bool permute;             \/\/ use the permutation sequence, if true$/;"	m	class:PatternSet
permute_patterns	PatternSetRef.cc	/^bool PatternSetRef::permute_patterns() {$/;"	f	class:PatternSetRef
set_input_pattern	PatternSetRef.cc	/^int PatternSetRef::set_input_pattern(int i, gsl_vector* v) {$/;"	f	class:PatternSetRef
set_permute_flag	PatternSetRef.h	/^  inline void set_permute_flag() { permute = true; }$/;"	f	class:PatternSet
set_target_pattern	PatternSetRef.cc	/^int PatternSetRef::set_target_pattern(int i, gsl_vector* v) {$/;"	f	class:PatternSetRef
sort_angular	PatternSetRef.cc	/^bool PatternSetRef::sort_angular(gsl_vector* ref_v) {$/;"	f	class:PatternSetRef
sort_euclidean	PatternSetRef.cc	/^bool PatternSetRef::sort_euclidean(gsl_vector* ref_v) {$/;"	f	class:PatternSetRef
target	PatternSet.cpp	/^        std::vector<double> target;$/;"	m	class:SortPatternSetAngular	file:
target	PatternSet.cpp	/^        std::vector<double> target;$/;"	m	class:SortPatternSetEuclidean	file:
target	PatternSet.h	/^        std::vector<double> target;$/;"	m	class:PatternSet
target_pattern	PatternSetRef.cc	/^gsl_vector* PatternSetRef::target_pattern(int i, gsl_vector* v) const {$/;"	f	class:PatternSetRef
targets_m	PatternSetRef.h	/^  gsl_matrix* targets_m;    \/\/ the matrix of target vectors, one per row$/;"	m	class:PatternSet
~PatternSet	PatternSet.cpp	/^PatternSet::~PatternSet() {$/;"	f	class:PatternSet
~PatternSetRef	PatternSetRef.cc	/^PatternSetRef::~PatternSetRef() {$/;"	f	class:PatternSetRef
