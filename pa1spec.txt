CSE 176 / EECS 276 Machine Learning Speciﬁcation for Programming Assignment #1
David C. Noelle Due: 11:45 P.M. on Sunday, February 17, 2013

Overview
The primary learning goal of this programming assignment is to provide you with a more intimate understanding of the common computational operations performed on collections of feature vectors, as used by machine learning algorithms. This assignment is also intended to provide you with some exposure to the utility of principal components analysis for feature extraction and dimensionality reduction. Speciﬁcally, you will be implementing a pattern set abstract data type — a data structure for manipulating collections of example vectors, equipped with common procedures for manipulating such example vectors — and you will demonstrate the utility of this abstract data type by projecting a collection of input vectors into their PCA space. Thus, in addition to providing you with insights into the mechanics of manipulating feature vectors and the properties of dimensionality reduction algorithms, this assignment will allow you to implement an abstract data type that will be very useful for future programming assignments in this class. Your pattern set abstract data type will be required to support the reading and writing of collections of feature vectors from plain text ﬁles, the measurement of distances between feature vectors using several different distance metrics, the random reordering the vectors in a collection, and the linear projection of vectors into their PCA space.

Submission for Evaluation
In order to submit your solution to this assignment for evaluation, you must generate a GNU Zipped TAR archive ﬁle, as described below, containing all of your source code and an assignment report. This archive ﬁle must then be delivered to the teaching team through the UCMCROPS system prior to the assignment due date. The submitted archive ﬁle must unpack into a directory (i.e., “folder”) called “P1”. This directory must contain an assignment report ﬁle in PDF format named “report.pdf”. The “P1” directory should also contain a subdirectory called “code”, which should contain all of the source 1

code necessary to compile and execute your program. (The primary exception to this requirement is that the “code” subdirectory need not contain standard libraries, including the GNU Scientiﬁc Library.) Program building and conﬁguration ﬁles, such as “makeﬁles”, are appreciated but are not required. The assignment report ﬁle should contain: • a brief description of the program that was generated, including the programming language that was used, any interesting libraries or other tools that were used, instructions for compilation, and instructions for execution • a trace of the program running, performing the operations described below on a collection of feature vectors that will be provided to you • a brief summary of what was learned from this programming assignment • a listing of acknowledgments and references, appropriately citing all assistance that was received on this project This report should be clear and easy to read, and it must be provided as a PDF ﬁle. In order to generate the required archive ﬁle on a Unix or Linux computer, such as those available in the class laboratory, simply construct a directory called “P1” with the contents described above and then execute the following command from the directory containing “P1”: $ tar -czvf P1.tgz P1 This will generate a GNU Zipped Tape Archive (TAR) ﬁle called “P1.tgz”. This ﬁle is to be submitted for evaluation using the UCMCROPS system. To submit this archive ﬁle, log onto the course UCMCROPS website, and navigate to the “Assignments” section. Then, locate “Programming Assignment #1” and select the option to submit your solution for this assignment. Provide your archive ﬁle as an attachment to this submission. Comments to the teaching team should appear in your report document and as inline comments in your source code. Submissions must arrive by 11:45 P.M. on Sunday, February 17th. Please allow time for potential system slowness immediately prior to this deadline. You may submit assignment solutions multiple times, and only the most recently submitted version will be evaluated. (If there are difﬁculties with performing multiple submissions, make use of the “Drop Box” feature on UCMCROPS to submit subsequent versions and send a note to the instructor indicating that you have done so.) As discussed in the course syllabus, late assignments will not be evaluated. If your last submission for this assignment arrives by 11:45 P.M. on Friday, February 15th, you will receive a 10% bonus to the score that you receive for this assignment. This bonus is intended to encourage you to try to complete this assignment early.

Activities
You are to implement a pattern set abstract data type, along with a “driver” computer program that demonstrates the features of your abstract data type. Speciﬁcally, your “driver” program should perform the following sequence of actions: 2

1. Reads two integer parameters from the terminal: the dimensionality of input vectors and the number of patterns in the pattern set. 2. Creates a pattern set of the speciﬁed size, with no output vectors in the patterns. 3. Reads a ﬁle name for a plain text ﬁle from the terminal. 4. Opens that ﬁle and reads a collection of input vectors, written in plain text, from that ﬁle into the created pattern set. 5. Reads a single vector, with dimensionality equal to that of the vectors in the pattern set, from the terminal. This vector will be referred to as the target vector. 6. Produces a random reordering of the input vectors in the pattern set. 7. Writes, to the terminal, the input vectors in the newly determined random order. 8. Writes, to the terminal, the input vectors in their originally read order. 9. Writes, to the terminal, the input vectors in ascending order of their Euclidean distance from the target vector (i.e., the closest vector is ﬁrst). 10. Writes, to the terminal, the input vectors in ascending order of their angular distance from the target vector (i.e., the closest vector is ﬁrst). 11. Calculates the principal components of the input vectors, and produces a new pattern set with each input vector replaced with its projection onto the principal component axes, with the components sorted in order (i.e., the ﬁrst element of the projected vectors should correspond to the ﬁrst principal component, and so on). 12. Writes, to the terminal, the projected input vectors in the order in which they were read. The pattern ﬁles to be read by your program are to be plain text ﬁles that contain one pattern on each line of the ﬁle. Thus, each line will contain a sequence of real numbers separated only by whitespace. The ﬁrst din numbers on each line form the input vector for that pattern, and the remaining dout numbers form the corresponding output vector. In future assignments, it will be important to have each pattern include both an input vector and an output vector, but, for this assignment, the value of dout will always be zero, which means that no output vectors will be provided. Thus, in this assignment, all operations will be performed only on the collection of input vectors in the pattern set, each of which will have a dimensionality of din speciﬁed by the user at execution time. Note that it will be important for future assignments, however, to be able to read and record output vectors for each pattern, as well. You will be provided with a sample input ﬁle of input feature vectors. This will be provided to you through the UCMCROPS class web site. Your program should be able to read this sample ﬁle without modiﬁcation. (Speciﬁcally, it should not be necessary to reformat the ﬁle in any way or import it into your source code in order for it to be read.) You are required to produce a textual 3

trace log of your program running on this sample input ﬁle, and the resultant log should be included in the report document that you submit for evaluation. The trace log that you submit in your report document is intended to demonstrate that your pattern set abstract data type is functional, but it will not be the only means used by the teaching team to evaluate your work. In addition to executing your code, the teaching team will examine your source code to make sure that some minimal features are present and documented in your implementation. Speciﬁcally, your pattern set abstract data type should minimally include: • the number of patterns in the pattern set • the dimensionality of the input vectors • the dimensionality of the corresponding output vectors • a matrix of input vectors, with the number of rows being the number of patterns and the number of columns being the dimensionality of the input vectors. • a matrix of output vectors, with the number of rows being the number of patterns and the number of columns being the dimensionality of the output vectors. • an integer vector indicating the order in which the patterns should be considered (e.g., output), called the ordering sequence Minally, the following operations on your pattern set implementation should be supported: • allocating and deallocating a pattern set • reading a collection of patterns from the terminal and from a text ﬁle — each row containing one input vector followed by the corresponding output vector • writing the collection of patterns to the terminal and to a text ﬁle — each row containing one input vector followed by the corresponding output vector — in the order speciﬁed by the ordering sequence • randomly generating a new ordering sequence • generating a new ordering sequence so as to sort the input vectors according to Euclidean distance to a given target vector • generating a new ordering sequence so as to sort the input vectors according to angular distance to a given target vector • generate a copy of a given pattern set with the input vectors projected onto their principal component axes

4

The source code that you submit for evaluation should be of your own design. You may use openly available standard libraries in order to construct your program, however. In particular, if you are writing your program in C or C++, you are encouraged to make use the rich collection of tools provided by the GNU Scientiﬁc Library. This library may be found at: www.gnu.org/software/gsl/ This web site also contains extensive documentation describing the functionality provided by the library. Your implementation will be evaluated primarily for accuracy, with efﬁciency being a secondary consideration. Your source code will be examined, however, and the readability and style of your implementation will have a substantial inﬂuence on how your assignment is evaluated. As a rough rule of thumb, consider the use of good software writing practices as accounting for approximately 10% of the value of this exercise. Note also that, as discussed in the course syllabus, submissions that fail to successfully compile will not be evaluated and will receive no credit. As for all assignments in this class, submitted solutions should reﬂect the understanding and effort of the individual student making the submission. Not a single line of computer code should be shared between course participants. If there is ever any doubt concerning the propriety of a given interaction, it is the student’s responsibility to approach the instructor and clarify the situation prior to the submission of work results. Also, helpful conversations with fellow students, or any other person (including members of the teaching team), should be explicitly mentioned in submitted assignments (e.g., in comments in the submitted source code ﬁles). Failure to appropriately cite sources is called plagiarism, and it will not be tolerated! The members of the teaching team stand ready to help you with the learning process embodied by this assignment. Please do not hesitate to request their assistance.

5

